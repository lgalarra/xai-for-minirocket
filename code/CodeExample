import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from sktime.datasets import load_UCR_UEA_dataset

# Paso 1: Cargar FordA
X, y = load_UCR_UEA_dataset(name="FordA", return_X_y=True)
X = X.to_numpy().astype(np.float32).reshape((-1, 1, 500))  # (n_samples, 1, 500)
y = np.where(y == -1, 0, 1)  # Asegura etiquetas 0/1

# Paso 2: Separar datos
X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)

# Paso 3: Obtener parámetros de MiniRocket
from minirocket import fit, get_parameters
X_sample = X_train[:100]  # Muestra pequeña para obtener parámetros
parameters = get_parameters(X_sample)  # (num_channels_per_combination, channel_indices, dilations, num_features_per_dilation, biases)

# Paso 4: Transformar con trazas
from explicabilidad import transform_prime  # Asegúrate de importar tus funciones correctamente
phi_X_train, _ = transform_prime(X_train, X_train, parameters)
phi_X_test, _ = transform_prime(X_test, X_test, parameters)

# Paso 5: Entrenar clasificador
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(phi_X_train, y_train)

# Paso 6: Aplicar explicabilidad
from explicabilidad import minirocket_explain
X_to_explain = X_test[0:1]  # Una muestra para explicar
y_pred = clf.predict(phi_X_test[0:1])

# Background de SHAP
background_X = X_train[:100]

# Aplicar MiniRocket Explain
contribuciones_beta_j, pred = minirocket_explain(
    X_to_explain, clf, background_X,
    base_explanation_method='strato',
    baseline_policy='baricenter_opposite_class',
    parameters=parameters
)

# Paso 7: Comparar con StratoSHAP puro (punto a punto)
from explicabilidad import shap_explain_on_timeseries
contribuciones_puntuales = shap_explain_on_timeseries(
    clf, X_to_explain, background_X
)

# Paso 8: Evaluar similitud
# Alinear los vectores para r2
beta_strato_phi = np.array([contribuciones_beta_j[j] for j in sorted(contribuciones_beta_j.keys())])
beta_strato_point = np.array([contribuciones_puntuales[j] for j in sorted(contribuciones_puntuales.keys())])
r2 = r2_score(beta_strato_point, beta_strato_phi)
print(f"R² entre explicaciones: {r2:.4f}")

